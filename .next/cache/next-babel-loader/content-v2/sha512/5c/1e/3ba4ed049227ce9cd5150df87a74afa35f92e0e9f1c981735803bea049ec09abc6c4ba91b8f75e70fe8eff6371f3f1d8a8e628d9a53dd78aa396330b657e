{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\amitd\\\\Desktop\\\\REUNION\\\\reunion_nextjs\\\\Components\\\\Navbar\\\\Navbar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport styles from \"./Navbar.module.css\";\nimport logo from \"../../public/Images/logo.jpg\";\nimport bars from \"../../public/Images/icons8-menu.svg\";\nimport cross from \"../../public/Images/icons8-close.svg\";\n\nconst Navbar = () => {\n  const {\n    0: isExpanded,\n    1: setIsExpanded\n  } = useState(false);\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(false);\n\n  const toggleNavbar = () => {\n    setIsExpanded(prevExpanded => !prevExpanded);\n  };\n\n  const closeNavbar = () => {\n    if (isClient && window.innerWidth < 768) {\n      setIsExpanded(false);\n    }\n  }; // Add an event listener to check the window width on resize\n\n\n  useEffect(() => {\n    setIsClient(true); // Set isClient to true once the component is mounted on the client side\n\n    const handleResize = () => {\n      setIsExpanded(prevExpanded => isClient && window.innerWidth >= 768);\n    }; // Initial check\n\n\n    handleResize(); // Attach the event listener\n\n    window.addEventListener(\"resize\", handleResize); // Remove the event listener when the component is unmounted\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [isClient]);\n\n  const scrollDown = () => {\n    document.getElementById(\"menu\").scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [isExpanded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.first\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.second,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.third\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.logoOnly,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this), isClient && window.innerWidth < 768 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleNavbar,\n      className: styles.toggleButton,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: isExpanded ? cross : bars,\n        alt: \"expand bars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Navbar;","map":{"version":3,"sources":["C:/Users/amitd/Desktop/REUNION/reunion_nextjs/Components/Navbar/Navbar.js"],"names":["React","useState","useEffect","Link","styles","logo","bars","cross","Navbar","isExpanded","setIsExpanded","isClient","setIsClient","toggleNavbar","prevExpanded","closeNavbar","window","innerWidth","handleResize","addEventListener","removeEventListener","scrollDown","document","getElementById","scrollIntoView","behavior","container","first","second","third","logoOnly","toggleButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport styles from \"./Navbar.module.css\";\r\nimport logo from \"../../public/Images/logo.jpg\";\r\nimport bars from \"../../public/Images/icons8-menu.svg\";\r\nimport cross from \"../../public/Images/icons8-close.svg\";\r\n\r\nconst Navbar = () => {\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    const [isClient, setIsClient] = useState(false);\r\n\r\n    const toggleNavbar = () => {\r\n        setIsExpanded((prevExpanded) => !prevExpanded);\r\n    };\r\n\r\n    const closeNavbar = () => {\r\n        if (isClient && window.innerWidth < 768) {\r\n            setIsExpanded(false);\r\n        }\r\n    };\r\n\r\n    // Add an event listener to check the window width on resize\r\n    useEffect(() => {\r\n        setIsClient(true); // Set isClient to true once the component is mounted on the client side\r\n\r\n        const handleResize = () => {\r\n            setIsExpanded((prevExpanded) => isClient && window.innerWidth >= 768);\r\n        };\r\n\r\n        // Initial check\r\n        handleResize();\r\n\r\n        // Attach the event listener\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n        // Remove the event listener when the component is unmounted\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, [isClient]);\r\n\r\n    const scrollDown = () => {\r\n        document.getElementById(\"menu\").scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {isExpanded ? (\r\n                <>\r\n                    <div className={styles.first}>\r\n                        {/* ... */}\r\n                    </div>\r\n                    <div className={styles.second}>\r\n                        <img src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    <div className={styles.third}>\r\n                        {/* ... */}\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <div className={styles.logoOnly}>\r\n                    <img src={logo} alt=\"logo\" />\r\n                </div>\r\n            )}\r\n\r\n            {isClient && window.innerWidth < 768 && (\r\n                <button onClick={toggleNavbar} className={styles.toggleButton}>\r\n                    <img src={isExpanded ? cross : bars} alt=\"expand bars\" />\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n"]},"metadata":{},"sourceType":"module"}